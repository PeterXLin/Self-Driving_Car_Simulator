# the GUI layout code was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Button, PhotoImage
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import Car_and_Map
import time
import Model
import numpy as np
# import matplotlib.pyplot as plt
# import matplotlib.animation as animation
# import numpy as np

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

# --------------global variable--------------
# ----------------- backend ------------------------------


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def load_map():
    car_figure.clear()
    car_plot = car_figure.add_subplot(111)
    # TODO: read map
    my_map = Car_and_Map.Map('./data/軌道座標點.txt')
    car_descriptor, head_descriptor = my_map.draw_map_and_car_start(car_plot)
    car_canvas.draw()
    return my_map, car_plot, car_descriptor, head_descriptor


def load_record():
    """load log and plot in figure"""
    # TODO: finish this function
    my_map, car_plot, car_descriptor, head_descriptor = load_map()
    my_car = Car_and_Map.Car(my_map.car_init_position, my_map.car_init_degree)
    for i in range(10):
        my_car.move(0)
        my_car.draw_car(car_descriptor, head_descriptor)
        sensor_value = my_car.sensor(my_map.border_linear_equations)
        update_sensor_output(sensor_value)
        car_canvas.draw()
        time.sleep(0.5)


def self_drive():
    """self drive based on the pre train MLP model"""
    my_map, car_plot, car_descriptor, head_descriptor = load_map()
    my_car = Car_and_Map.Car(my_map.car_init_position, my_map.car_init_degree)
    sensor_value = my_car.sensor(my_map.border_linear_equations)
    update_sensor_output(sensor_value)
    # load model
    my_model = Model.load_model()
    tmp_input = np.array(([sensor_value[1], sensor_value[2], sensor_value[0]]))
    while True:
        turn_degree = my_model.predict(tmp_input)[0][1]
        my_car.move(turn_degree)
        my_car.draw_car(car_descriptor, head_descriptor)

        if my_car.detect_collision(my_map.border_linear_equations):
            # report collision and reset car position
            # tell user click self drive button again to restart
            break
        if my_car.arrive(my_map.dest_up_left, my_map.dest_botton_right):
            # show congratulation message
            break

        sensor_value = my_car.sensor(my_map.border_linear_equations)
        tmp_input = np.array(([sensor_value[1], sensor_value[2], sensor_value[0]]))
        update_sensor_output(sensor_value)
        car_canvas.draw()


def update_sensor_output(new_value: list):
    """update sensor value"""
    canvas.itemconfig(left_sensor_value_entry, text=round(new_value[0], 2))
    canvas.itemconfig(front_sensor_value_entry, text=round(new_value[1], 2))
    canvas.itemconfig(right_sensor_value_entry, text=round(new_value[2], 2))


# ---------------------------------------------------------
window = Tk()

window.geometry("1000x800")
window.configure(bg="#FFFFFF")
window.title("Self driving car")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 800,
    width = 1000,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    250.0,
    0.0,
    1000.0,
    100.0,
    fill="#8D99AE",
    outline="")

canvas.create_rectangle(
    250.0,
    100.0,
    1000.0,
    800.0,
    fill="#EDF2F4",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    250.0,
    800.0,
    fill="#2B2D42",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=load_record,
    relief="flat"
)
button_1.place(
    x=50.0,
    y=560.0,
    width=150.0,
    height=60.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=self_drive,
    relief="flat"
)
button_2.place(
    x=50.0,
    y=640.0,
    width=150.0,
    height=60.0
)

canvas.create_text(
    250.0,
    33.0,
    anchor="nw",
    text="Left",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

canvas.create_text(
    500.0,
    33.0,
    anchor="nw",
    text="Front",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

canvas.create_text(
    750.0,
    33.0,
    anchor="nw",
    text="Right",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

right_sensor_value_entry = canvas.create_text(
    900.0,
    33.0,
    anchor="nw",
    text="0",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

front_sensor_value_entry = canvas.create_text(
    650.0,
    33.0,
    anchor="nw",
    text="0",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

left_sensor_value_entry = canvas.create_text(
    400.0,
    33.0,
    anchor="nw",
    text="0",
    fill="#FFFFFF",
    font=("SuezOne Regular", 24 * -1)
)

canvas.create_text(
    63.0,
    86.0,
    anchor="nw",
    text="Map Name",
    fill="#FFFFFF",
    font=("SeoulHangangEB", 24 * -1)
)

canvas.create_text(
    66.0,
    200.0,
    anchor="nw",
    text="Log Name",
    fill="#FFFFFF",
    font=("SeoulHangangEB", 24 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=50.0,
    y=250.0,
    width=150.0,
    height=40.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=50.0,
    y=124.0,
    width=150.0,
    height=40.0
)
# ------------------------- try new things
car_figure = Figure(figsize=(7.5, 7), dpi=100)
car_canvas = FigureCanvasTkAgg(car_figure, master=window)  # A tk.DrawingArea.
car_canvas.draw()
car_canvas.get_tk_widget().place(x=250, y=100, width=750, height=700)
# ---------------------------------

window.resizable(False, False)
window.mainloop()
